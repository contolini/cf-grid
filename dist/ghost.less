/*                                      
            /$$$$$$          /$$        
           /$$__  $$        | $$        
  /$$$$$$$| $$  \__//$$$$$$ | $$$$$$$  
 /$$_____/| $$$$   /$$__  $$| $$__  $$  
| $$      | $$_/  | $$  \ $$| $$  \ $$
| $$      | $$    | $$  | $$| $$  | $$  
|  $$$$$$$| $$    | $$$$$$$/| $$$$$$$/  
 \_______/|__/    | $$____/ |_______/  
                  | $$                  
                  | $$                  
                  |__/                  

* Ghost - v0.2.0 - 2013-06-24
* http://consumerfinance.gov
* Copyright (c) 2013 Consumer Financial Protection Bureau; Licensed Public Domain */

// The following variables can be overridden in your application's stylesheet.

// Grid's max width in px.

@wrapper-width: 1200px;

// Width between columns.

@gutter-width: 30px;

// Total number of columns.

@total-columns: 12;

// Column blocks have a bg color if set to true.

@debug: false;

// Setting @exposed to true will shift gutters from the left side of columns
// to the right. This allows elements to be left aligned which is necessary when 
// rows are not used and blocks are allowed to float on their own. For example,
// if you have a long unordered list of li's that you want to float without
// having to break them up into rows, you could use this feature.

@exposed: false;


// Gutter percentage is calculated by putting gutter width over wrapper width.
// You should not override this in your application's stylesheet.

@gutter-percentage: percentage( @gutter-width / @wrapper-width );


// A wrapper holds one or more rows.

.wrapper( @wrapper-width: @wrapper-width ) {

  max-width: @wrapper-width;
  margin: 0 auto;
  padding: 0;
  position: relative;

  // We use padding so margin can be used for centering
  // A percentage is used first for non-calc() browsers

  padding: 0 ( @gutter-percentage / 2 );
  padding: 0 calc( @gutter-width / 2 );

}


// A row holds one or more column() elements

.row() {

  margin: 0 auto;
  width: 100%;
  overflow: hidden;
  clear: both;

  // Clearfix hack for IE 6/7 only

  *zoom: 1;

  // Clearfix hack: http://nicolasgallagher.com/micro-clearfix-hack/

  &:before,
  &:after {
    content: " ";
    display: table; 
  }

  &:after {
    clear: both;
  }

}


// Column()s hold actual content

.column( @columns, @total-columns: @total-columns ) {
  
  display: inline;
  float: left;

  // We use calc() to allow flexible columns with fixed gutters.
  // But first, as a fallback, we set fluid column widths for older browsers.
  // 
  // To calculate the percentage width of this element, we take the number of 
  // columns it'll span and divide by the total number of columns. We then have
  // to subtract the gutter width because it's specified using a margin rule later.
  // We don't simply subtract the gutter width because there are n - 1 gutters 
  // per row. Instead, we subtract the gutter width multiplied by the column 
  // difference over the number of total columns. This gives us a column that is 
  // slightly larger than if we had simply subtracted 100% of the gutter width.
  //  
  //                      num cols used                            total cols - num cols used 
  //  column width in % = ------------- - ( width of gutter in % * --------------------------- )
  //                       total cols                                     total cols

  width: percentage( @columns / @total-columns ) - ( @gutter-percentage * ( ( @total-columns - @columns ) / @total-columns ) );

  // Now we use calc() to get the ideal flexible columns w/ fixed gutters.
  // 
  //                      num cols used                            num cols used 
  //  column width in % = ------------- + ( width of gutter in % * ------------- )
  //                       total cols                               total cols

  @col-width: percentage( @columns / @total-columns ) + ( @gutter-percentage * ( @columns / @total-columns ) );
  width: calc( ~"@{col-width} - @{gutter-width}" );

}


// When the element spans less than the full length of total columns, give it a gutter.

.column( @columns, @total-columns: @total-columns ) when ( @columns < @total-columns ) {

  // Margin on left is the full gutter's width in px
  // Again, using percentages for non-calc() browsers

  margin: 0 0 0 @gutter-percentage;
  margin: 0 0 0 calc( @gutter-width );

  // Remove gutter from first children, each row will have n - 1 gutters.

  &:first-child {
    margin-left: 0;
  }

}


// When @columns spans the full length of total columns, remove gutters
// because the content will fill the entire width of the page.

.column( @columns, @total-columns: @total-columns ) when ( @columns >= @total-columns ) {

  margin: 0;

}


// When @exposed is true, place gutters on the right so that content
// can be left-aligned.

.column( @columns, @total-columns: @total-columns ) when ( @exposed ) {

  // There are the same number of gutters as column()s, so we calculate
  // width in a simpler fashion.

  width: percentage( @columns / @total-columns ) - @gutter-percentage;

  @col-width: percentage( @columns / @total-columns );
  width: calc( ~"@{col-width} - @{gutter-width}" );

  margin: 0 @gutter-percentage 0 0;
  margin: 0 calc( @gutter-width ) 0 0;

}


.push( @offset: 1, @total-columns: @total-columns ) {

  // Fallback for non-calc() browsers. This is the same formula we use for 
  // col widths above but we use it for the column()'s margin-left instead.
  // We add twice the original gutter to the offset.
  // 
  //                num cols used                            total cols - num cols used 
  //  offset in % = ------------- - ( width of gutter in % * --------------------------- ) + twice the orig gutter %
  //                  total cols                                     total cols

  @push: percentage( @offset / @total-columns ) - ( @gutter-percentage * ( ( @total-columns - @offset / @total-columns ) );
  margin-left: @push + ( @gutter-percentage * 2 );

  // Now we use calc() for modern browsers. Same formula from the column() 
  // section which involves subtracting the fixed-width gutter. The orig 
  // gutter is added twice (it looks like we're only adding it once because
  // in the original col width formula we subtract the gutter).
  // 
  //                      num cols used                            num cols used 
  //  column width in % = ------------- + ( width of gutter in % * ------------- )
  //                       total cols                               total cols

  @push: percentage( @offset / @total-columns ) + ( @gutter-percentage * ( @offset / @total-columns ) );
  margin-left: calc( ~"@{push} + @{gutter-width}" );

  // With first-children we want to add only one gutter width to the equation.

  &:first-child {
    @push: percentage( @offset / @total-columns ) - ( @gutter-percentage * ( ( @total-columns - @offset / @total-columns ) );
    margin-left: @push + @gutter-percentage;

    @push: percentage( @offset / @total-columns ) + ( @gutter-percentage * ( @offset / @total-columns ) );
    margin-left: calc( ~"@{push}" );
  }

}


.pull( @offset: 1, @total-columns: @total-columns ) {

  // Fallback for non-calc() browsers. This is the same formula we use for 
  // col widths above but we use it for the column()'s margin-left instead.
  // We add the original gutter to the offset.
  // 
  //                num cols used                            total cols - num cols used 
  //  offset in % = ------------- - ( width of gutter in % * --------------------------- ) + orig gutter %
  //                  total cols                                     total cols

  @push: percentage( @offset / @total-columns ) - ( @gutter-percentage * ( ( @total-columns - @offset / @total-columns ) );
  margin-right: @push + @gutter-percentage;

  // Now we use calc() for modern browsers. Same formula from the column() 
  // section which involves subtracting the fixed-width gutter. By adding the
  // gutter for the offset it cancels out the original subtraction.
  // 
  //                      num cols used                            num cols used 
  //  column width in % = ------------- + ( width of gutter in % * ------------- )
  //                       total cols                               total cols

  @push: percentage( @offset / @total-columns ) + ( @gutter-percentage * ( @offset / @total-columns ) );
  margin-right: calc( ~"@{push}" );

}


// Debug tools

.column( @columns, @total-columns: @total-columns ) when ( @debug ) {

  background-color: #ffc;

}