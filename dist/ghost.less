/*                                      
            /$$$$$$          /$$        
           /$$__  $$        | $$        
  /$$$$$$$| $$  \__//$$$$$$ | $$$$$$$  
 /$$_____/| $$$$   /$$__  $$| $$__  $$  
| $$      | $$_/  | $$  \ $$| $$  \ $$
| $$      | $$    | $$  | $$| $$  | $$  
|  $$$$$$$| $$    | $$$$$$$/| $$$$$$$/  
 \_______/|__/    | $$____/ |_______/  
                  | $$                  
                  | $$                  
                  |__/                  

* Ghost - v0.2.0 - 2013-06-13
* http://consumerfinance.gov
* Copyright (c) 2013 Consumer Financial Protection Bureau; Licensed Public Domain */

// The following variables can be overridden in your application's stylesheet.

// Grid's max width in px.

@wrapper-width: 1200px;

// Width between columns.

@gutter-width: 30px;

// Total number of columns.

@total-columns: 12;

// Span blocks have a bg color if set to true.

@debug: false;


// A wrapper holds one or more rows.

.wrapper() {

  max-width: @wrapper-width;
  margin: 0 auto;
  padding: 0;
  position: relative;

}


// A row holds one or more spans

.row() {

  margin: 0 auto;
  width: 100%;
  overflow: hidden;
  clear: both;

  // Clearfix hack for IE 6/7 only

  *zoom: 1;

  // Clearfix hack: http://nicolasgallagher.com/micro-clearfix-hack/

  &:before,
  &:after {
    content: " ";
    display: table; 
  };

  &:after {
    clear: both;
  };

}


// Spans hold actual content

.span( @columns ) {

  float: left;

  // We use calc() to allow flexible columns with fixed gutters.
  // But first, as a fallback, we set fluid column widths for older browsers.
  // 
  // num cols used
  // ------------- - width of gutter in % = column width in %
  //  total cols

  @gutter-percentage: percentage( @gutter-width / @wrapper-width );
  width: percentage( @columns / @total-columns ) - @gutter-percentage;

  // Now we use calc() to get the ideal flexible columns w/ fixed gutters.
  // 
  // num cols used
  // ------------- - gutter width = column width in %
  //  total cols

  @col-width: percentage( @columns / @total-columns );
  width: calc( ~"@{col-width} - @{gutter-width}" );

  // Margin on left is the full gutter's width
  // Again, using percentages for non-calc() browsers

  margin: 0 0 0 @gutter-percentage;
  margin: 0 0 0 calc( @gutter-width );

  &:first-child {
    margin-left: 0;
  }

  // Mobile (landscape and portrait)
  //  
  // wrapper width - gutter width = width of single column

  @media only screen and ( max-width: 767px ) {

    @gutter-percentage: percentage( @gutter-width / @wrapper-width );
    width: 100 - @gutter-percentage;
    width: calc( ~"100% - @{gutter-width}" );

  }

}


// Apply offset to spans to push them to the right

.offset( @columns ) {

  // Fallback for non-calc() browsers.
  // 
  // num cols used
  // ------------- - width of gutter in % = column offset in %
  //  total cols

  @gutter-percentage: percentage( @gutter-width / @wrapper-width );
  padding-left: percentage( @columns / @total-columns ) - @gutter-percentage;

  // Modern browsers' offset.
  // 
  // num cols used
  // ------------- - gutter width = column offset in %
  //  total cols

  @col-width: percentage( @columns / @total-columns );
  padding-left: calc( ~"@{col-width} - @{gutter-width}" );

  // Mobile (landscape and portrait)

  @media only screen and ( max-width: 767px ) {

    padding-left: 0;

  }

}


// Debug tools

.span( @columns ) when ( @debug ) {

  background-color: #ffc;

}