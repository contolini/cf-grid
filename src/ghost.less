// The following variables can be overridden in your application's stylesheet.

// Grid's max width in px.

@wrapper-width: 1200px;

// Width between columns.

@gutter-width: 30px;

// Total number of columns.

@total-columns: 12;

// Span blocks have a bg color if set to true.

@debug: false;

// Setting @exposed to true will shift gutters from the left side of columns
// to the right. This allows spans to be left aligned which is necessary when 
// rows are not used and spans are allowed to float on their own. For example,
// if you have a long unordered list of blocks that you want to float without
// having to break them up into rows, you could use this feature.

@exposed: false;

// Gutter percentage is calculated by putting gutter width over wrapper width.

@gutter-percentage: percentage( @gutter-width / @wrapper-width );

// A wrapper holds one or more rows.

.wrapper() {

  max-width: @wrapper-width;
  margin: 0 auto;
  padding: 0;
  position: relative;

  // We use padding so margin can be used for centering
  // A percentage is used first for non-calc() browsers

  padding: 0 ( @gutter-percentage / 2 );
  padding: 0 calc( @gutter-width / 2 );

}


// A row holds one or more spans

.row() {

  margin: 0 auto;
  width: 100%;
  overflow: hidden;
  clear: both;

  // Clearfix hack for IE 6/7 only

  *zoom: 1;

  // Clearfix hack: http://nicolasgallagher.com/micro-clearfix-hack/

  &:before,
  &:after {
    content: " ";
    display: table; 
  };

  &:after {
    clear: both;
  };

}


// Spans hold actual content

.span( @columns ) {

  float: left;

  // We use calc() to allow flexible columns with fixed gutters.
  // But first, as a fallback, we set fluid column widths for older browsers.
  // 
  // To calculate the percentage width of this element, we take the number of 
  // columns it'll span and divide by the total number of columns. We then have
  // to subtract the gutter width because it's specified using a margin rule later.
  // We don't simply subtract the gutter width because there are n - 1 gutters 
  // per row. Instead, we subtract the gutter width multiplied by the column 
  // difference over the number of total columns. This gives us a span that is 
  // slightly larger than if we had simply subtracted 100% of the gutter width.
  //  
  //                      num cols used                            total cols - num cols used 
  //  column width in % = ------------- - ( width of gutter in % * --------------------------- )
  //                       total cols                                     total cols

  width: percentage( @columns / @total-columns ) - ( @gutter-percentage * ( ( @total-columns - @columns ) / @total-columns ) );

  // Now we use calc() to get the ideal flexible columns w/ fixed gutters.
  // 
  //                      num cols used                            num cols used 
  //  column width in % = ------------- + ( width of gutter in % * ------------- )
  //                       total cols                               total cols

  @col-width: percentage( @columns / @total-columns ) + ( @gutter-percentage * ( @columns / @total-columns ) );
  width: calc( ~"@{col-width} - @{gutter-width}" );

  // Margin on left is the full gutter's width in px
  // Again, using percentages for non-calc() browsers

  margin: 0 0 0 @gutter-percentage;
  margin: 0 0 0 calc( @gutter-width );

  // Remove gutter from first children

  &:first-child {
    margin-left: 0;
  }

  // Mobile (landscape and portrait)
  //  
  // Single column, remove margin from first children

  @media only screen and ( max-width: 767px ) {

    width: 100%;
    margin-left: 0;

  }

}

.span( @columns ) when ( @exposed ) {

  // When @exposed is true, place gutters on the right so that content
  // can be left-aligned.

  margin: 0 @gutter-percentage 0 0;
  margin: 0 calc( @gutter-width ) 0 0;

}


// Apply offset to spans to push them to the right

.offset( @columns ) {

  // Fallback for non-calc() browsers.
  // 
  // num cols used
  // ------------- - width of gutter in % = column offset in %
  //  total cols

  @gutter-percentage: percentage( @gutter-width / @wrapper-width );
  padding-left: percentage( @columns / @total-columns ) - @gutter-percentage;

  // Modern browsers' offset.
  // 
  // num cols used
  // ------------- - gutter width = column offset in %
  //  total cols

  @col-width: percentage( @columns / @total-columns );
  padding-left: calc( ~"@{col-width} - @{gutter-width}" );

  // Mobile (landscape and portrait)

  @media only screen and ( max-width: 767px ) {

    padding-left: 0;

  }

}


// Debug tools

.span( @columns ) when ( @debug ) {

  background-color: #ffc;

}