// Grid variables. Override these in your application's stylesheet.
// 
// @wrapper-width = grid's max width in px.
// 
// @gutter-width = width between columns.
//   Use % if you want a fluid-width grid.
//   Use px for a fixed-width grid.
//   
// @total-columns = total number of columns
//   
// @debug = span blocks have a bg color if set to true
@wrapper-width: 960px;
@gutter-width: 30px;
@total-columns: 12;
@debug: false;

// The .ghost- prefix is to avoid naming collisions
// TODO: set this to max-width and make everything mobile-first responsive
.ghost-wrapper {
  width: @wrapper-width;
  margin: 0 auto;
}

.ghost-row {
  margin: 0 auto;
  width: 100%;
  overflow: hidden;
  clear: both;
  // Clearfix hack for IE 6/7 only
  *zoom: 1;

  // Clearfix hack: http://nicolasgallagher.com/micro-clearfix-hack/
  &:before,
  &:after {
    content: " ";
    display: table; 
  };

  &:after {
    clear: both;
  };
}

// Fluid-width grid
// This mixin will be used if gutter-width unit is %
// 
// num cols used
// -------------  *  100% - width of gutter
//  total cols
//  
.ghost-span( @columns ) when ( ispercentage(@gutter-width) ) {
  width: @columns / @total-columns * 100 - @gutter-width;
  margin: 0 0 0 @gutter-width;
  float: left;
}

// Fixed-width grid
// This mixin will be used if gutter-width unit is px
// 
// num cols used
// -------------  *  width of wrapper - width of gutter
//  total cols
//  
.ghost-span( @columns ) when ( ispixel(@gutter-width) ) {
  width: @columns / @total-columns * @wrapper-width - @gutter-width;
  margin: 0 ( @gutter-width / 2 );
  float: left;
}

// TODO: add media query support, fixed-width spans needs to change width when viewport changes size
// With fluid-width layouts we also need to stack columns on smaller viewports

// Debug tools
.ghost-span( @columns ) when ( @debug ) {
  background-color: #ccc;
  border-radius: 10px;
}